# Enums
enum Gendar {
    MALE
    FEMALE
}

enum Category {
    FOOD
    TRANSPORT
    SHOPPING
    UTILITIES
    ENTERTAINMENT
    HEALTHCARE
    GROCERIES
    EDUCATION
    OTHER
}

enum PaymentMethod {
 CASH
 CREDIT_CARD
 DEBIT_CARD
 BANK_TRANSFER
 DIGITAL_WALLET
 UPI
 CHEQUE
 SALARY
 OTHER
}

enum Roles {
    USER
    ADMIN
    SUPER_ADMIN
}

enum TransactionType {
	CREDIT
	DEBIT
}

enum SortDirection {
  ASC
  DESC
}

enum UserSortField {
  id
  firstName
  lastName
  email
  createdAt
}

enum ExpenseSortField {
  id
  amount
  category
  paymentMethod
  transactionType
  createdAt
}

enum TenantSortField {
  id
  name
  maxUsersAllowed
  licenseExpiry
  createdAt
}

# Types
type User {
    id: ID!
    firstName: String!
    lastName: String!
    email: String!
    phoneNumber: String!
    gendar: Gendar
    roles: [Role!]!
    expenses: [Expense!]!
    tenantId: ID
    createdBy: ID
    createdAt: String
    updatedAt: String
}

type Expense {
    id: ID!
    description: String!
    amount: Float!
    date: String!
    location: String
    category: Category
    paymentMethod: PaymentMethod
    user: User!
    createdAt: String
    updatedAt: String
    transactionType: String
}

type Role {
    id: ID!
    roleName: Roles!
}

type Tenant {
	id: ID!
    name: String!
    maxUsersAllowed: Int!
    licenseExpiry: String! 
    users: [User]
    createdAt: String
    updatedAt: String
}



# Input Types
input RoleInput {
  roleName: Roles
}

input UserInput {
    firstName: String!
    lastName: String!
    email: String!
    password: String!
    phoneNumber: String
    gendar: Gendar
    roles: [RoleInput!]
    tenantId: ID
    createdBy: ID
}

input UserUpdateInput {
    id: ID!
    firstName: String
    lastName: String
    email: String
    phoneNumber: String
    gendar: Gendar
    roles: [RoleInput!]
    tenantId: ID
    createdBy: ID
}

input ExpenseInput {
	id: ID
    description: String!
    amount: Float!
    date: String
    location: String
    category: Category!
    paymentMethod: PaymentMethod!
    transactionType: TransactionType!
    userId: ID!
}

input ExpenseUpdateInput {
    id: ID!
    description: String
    amount: Float
    date: String
    location: String
    category: Category
    paymentMethod: PaymentMethod
    transactionType: TransactionType
    userId: ID!
}

input TenantInput {
    id: ID
    name: String!
    maxUsersAllowed: Int!
    licenseExpiry: String!
    
}

input TenantUpdateInput {
    id: ID!
    name: String
    maxUsersAllowed: Int
    licenseExpiry: String
    
}

input UpdatePasswordInput {
	id:String!
	oldPassword:String!
	password:String!
}

input PaginationInput {
	pageSize: Int!
    pageNumber: Int!
    sortBy: String = "createdAt"
    sortDirection: String = "DESC"
}


type PaginatedUsers {
  data: [User!]!
  total: Int!
}

type PaginatedExpenses {
  data: [Expense!]!
  total: Int!
}

type PaginatedTenants {
  data: [Tenant!]!
  total: Int!
}

type DashboardData {
  transactionTypeByAmount: [KeyValuePair!]!
  groupingByCategory: [KeyValuePair!]!
  groupingByPaymentMethod: [KeyValuePair!]!
  lastFiveTransactions:[Expense]
}

type KeyValuePair {
  key: String!
  value: String!
}


# Queries
type Query {
  user(id: ID!): User
  expense(id: ID!): Expense
  fetchTenant(id: ID!): Tenant!
  
  users(
  	pageSize: Int!
    pageNumber: Int!
    sortBy: UserSortField = createdAt
    sortDirection: SortDirection = DESC
   ): PaginatedUsers!
       
  expenses(
  	pageSize: Int!
    pageNumber: Int!
    sortBy: UserSortField = createdAt
    sortDirection: SortDirection = DESC
  ): PaginatedExpenses!
  
  tenants(
    pageSize: Int!
    pageNumber: Int!
    sortBy: TenantSortField = id
    sortDirection: SortDirection = DESC
  ): PaginatedTenants!
  
  dashboardData(fromDate:String!
                toDate:String!):DashboardData!
}


# Mutations
type Mutation {
    saveUser(user: UserInput!): User!
    updateUser(user: UserUpdateInput!): User!
    deleteUser(id: ID!): String!
    updatePassword(updatePassword:UpdatePasswordInput!):String!

    saveExpense(expense: ExpenseInput!): Expense!
    updateExpense(expense: ExpenseUpdateInput!): Expense!
    deleteExpense(id: ID!): String!
    
    saveTenant(tenant: TenantInput!): Tenant!
    updateTenant(tenant: TenantUpdateInput!): Tenant!
    deleteTenant(id: ID!): String!
    
}
